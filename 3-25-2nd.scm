(define (make-table)
  (let ((table (list '*table*)))

    (define (assoc key records)
      (cond ((null? records) false)
	    ((equal? key (caar records)) (car records))
	    (else (assoc key (cdr records)))))

    (define (lookup-util key-list table)
      (cond ((null? key-list)
	     (list key-list table ))
	    ((pair? (cdr table))
	     (if (pair? (cadr table))
		 (let ((record (assoc (car key-list) (cdr table))))
		   (if record
		       (lookup-util (cdr key-list) record)
		       (list key-list table 'nomatchintable)))
		 (list key-list table 'nottable)))
	     ((null? (cdr table)) (list key-list table 'nullcdr))
	     (else (list key-list table 'else))))

    (define (insert! key-list value table)
      (let ((res (lookup-util key-list table)))
	(let ((found (null? (car res)))
	      (key-remain (car res))
	      (location (cadr res))
	      (reason (caddr res)))
	  (if found
	      (begin (set-cdr! location value)
		     'found)
	      (if (eq? reason 'nottable)
		  (begin (set-cdr! location (car (make-table-list key-remain value)))
			 reason)
		  (begin (set-cdr! location (cons (car (make-table-list key-remain value))
						  (cdr location)))
			 reason))))))

    (define (make-table-list key-list value)
      (if (null? key-list)
	  value
	  (list (cons (car key-list) (make-table-list (cdr key-list) value)))))

    (define (insert-interface! key-list value)
      (insert! key-list value table))
    (define (lookup-interface key-list)
      (let ((res (lookup-util key-list table)))
	(if (null? (car res))
	    (cdadr res)
	    false)))
    (define (dispatch op)
      (cond ((eq? op 'insert!) insert-interface!)
	    ((eq? op 'lookup) lookup-interface)
	    ((eq? op 'show) table)
	    (else (error "Undefined operation --make-table--" op))))
    dispatch))

(define (insert! key-list value table)
  ((table 'insert!) key-list value))
(define (lookup key-list table)
  ((table 'lookup) key-list))
(define (show-table table)
  (table 'show))

