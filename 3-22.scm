;;; problem 3.22
;;; 4april2012

(define (make-queue)
  (let ((front-ptr '())
	(rear-ptr '()))
	(define (empty-queue?)
	  (null? front-ptr))
	(define (front-queue)
	  (if (null? front-ptr)
	      (error "Queue empty - MAKE-QUEUE")
	      (car front-ptr)))
	(define (insert-queue! item)
	  (let ((new-pair (cons item '())))
	    (cond ((empty-queue?)
		   (set! front-ptr new-pair)
		   (set! rear-ptr new-pair)
		   front-ptr)
		  (else
		   (set-cdr! rear-ptr new-pair)
		   (set! rear-ptr new-pair)
		   front-ptr))))
	(define (delete-queue!)
	  (if (empty-queue?)
	      (error "Queue empty before deletion -  MAKE-QUEUE")
	      (begin (set! front-ptr (cdr front-ptr))
		     front-ptr)))
	(define (dispatch op)
	  (cond ((eq? op 'empty-queue?)(empty-queue?))
		((eq? op 'front-queue) (front-queue))
		((eq? op 'insert-queue) insert-queue!)
		((eq? op 'delete-queue) (delete-queue!))
		(else (error "Undefined operation MAKE-QUEUE" op))))
	dispatch))
	  
(define (empty-queue? queue)
  (queue 'empty-queue?))
(define (front-queue queue)
  (queue 'front-queue))
(define (insert-queue! queue item)
  ((queue 'insert-queue) item))
(define (delete-queue! queue)
  (queue 'delete-queue))
